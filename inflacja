#!/usr/bin/python3

# Copyright © 2016 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import datetime
import os

here = os.path.dirname(__file__)
data_path = path = '{here}/data'.format(here=here)

units = {
    'PLZ': 1,
    'PLN': 10000,
}

unit_names = [u for v, u in sorted((v, u) for u, v in units.items())]

def auto_unit(year):
    if year < 1995:
        return 'PLZ'
    return 'PLN'

def main():
    this_year = datetime.date.today().year
    ap = argparse.ArgumentParser()
    ap.add_argument('--from', dest='yfrom', metavar='FROM-YEAR', type=int, required=True)
    ap.add_argument('--to', dest='yto', metavar='TO-YEAR', type=int, default=this_year)
    ap.add_argument('--unit', dest='uto', metavar='TO-UNIT', choices=unit_names)
    ap.add_argument('amount', metavar='AMOUNT', type=float)
    ap.add_argument('unit', metavar='UNIT', choices=unit_names, default=None, nargs='?')
    options = ap.parse_args()
    yfrom = options.yfrom
    yto = options.yto
    for y in {yfrom, yto}:
        if y < 1951:
            # While we do have inflation data for 1950,
            # there was a shady redenomination in the middle of the year...
            # It's not worth the trouble.
            ap.error('years before 1951 are not supported')
    data = {}
    with open(path, 'rt', encoding='ASCII') as file:
        for line in file:
            year, value = line.split()
            year = int(year)
            value = float(value)
            data[year] = value
    ymax = max(data.keys()) + 1
    for y in {yfrom, yto}:
        if y > ymax:
            ap.error('years after {} are not supported'.format(ymax))
    value = options.amount
    unit = options.unit or auto_unit(yfrom)
    value *= units[unit]
    uto = options.uto or auto_unit(yto)
    for y in range(yfrom, yto):
        value *= data[y]
    for y in range(yto, yfrom):
        value /= data[y]
    value /= units[uto]
    print('{:.2f} {}'.format(value, uto))

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
