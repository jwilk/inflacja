#!/usr/bin/env python3

# Copyright Â© 2016-2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import datetime
import os

this = os.path.realpath(__file__)
here = os.path.dirname(this)
data_path = os.path.join(here, 'data')
del this, here

units = {
    'PLZ': 1,
    'PLN': 10000,
}

unit_names = [u for v, u in sorted((v, u) for u, v in units.items())]

def auto_unit(year):
    if year < 1995:
        return 'PLZ'
    return 'PLN'

def main():
    prev_year = datetime.date.today().year - 1
    ap = argparse.ArgumentParser()
    ap.add_argument('--from', dest='yfrom', metavar='FROM-YEAR', type=int, required=True)
    ap.add_argument('--to', dest='yto', metavar='TO-YEAR', type=int, default=prev_year)
    ap.add_argument('--unit', dest='uto', metavar='TO-UNIT', choices=unit_names)
    ap.add_argument('amount', metavar='AMOUNT', type=float)
    ap.add_argument('unit', metavar='UNIT', choices=unit_names, default=None, nargs='?')
    options = ap.parse_args()
    yfrom = options.yfrom
    yto = options.yto
    for y in {yfrom, yto}:
        if y < 1951:
            # While we do have inflation data for 1950,
            # there was a shady redenomination in the middle of the year...
            # It's not worth the trouble.
            ap.error('years before 1951 are not supported')
    data = {}
    with open(data_path, 'rt', encoding='ASCII') as file:
        for line in file:
            year, value = line.split()
            year = int(year)
            value = float(value)
            data[year] = value
    ymax = max(data.keys())
    for y in {yfrom, yto}:
        if y > ymax:
            ap.error('years after {} are not supported'.format(ymax))
    value = options.amount
    unit = options.unit or auto_unit(yfrom)
    value *= units[unit]
    uto = options.uto or auto_unit(yto)
    for y in range(yfrom + 1, yto + 1):
        value *= data[y]
    for y in range(yto + 1, yfrom + 1):
        value /= data[y]
    value /= units[uto]
    print('{:.2f} {}'.format(value, uto))

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
